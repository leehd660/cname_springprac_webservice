#스프링부트에서 properties의 이름을 application-XXX.properties로 만들면 XXX라는 이름의 profile이 생성되어 이를 통해 관리할 수 있음.
#즉 profile=XXX라는 식으로 호출하면 해당 properties의 설정들을 가져올 수 있음

spring.security.oauth2.client.registration.google.client-id=1055755332536-kvvhfune1n8q2t46onhpt30n2fa03201.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=7rwdcPXzB1xO32t2h-Ts9n-k
spring.security.oauth2.client.registration.google.scope=profile,email
#실제로 scope를 별도로 등록하지 않는데 기본값이 openid, profile,email이기 때문
#강제로 scope를 등록한 이유는 openid라는 scope가 있으면 Open Id Provider로 인식하기 때문
#그렇게 되면 OpenId Provider인 서비스(구글)와 그렇지 않은 서비스(네이버/카카오)로 나눠서 각각 OAuth2Service를 만들어야함.
#하나의 OAuth2Service를 사용하기 위해 일부러 openid scope를 빼고 등록함.

#registration
spring.security.oauth2.client.registration.naver.client-id=IFiV26b4rBjhCg_2Exwi
spring.security.oauth2.client.registration.naver.client-secret=NjF0PuIbpN
spring.security.oauth2.client.registration.naver.redirect-uri={baseUrl}/{action}/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.naver.authorization_grant_type=authorization_code
spring.security.oauth2.client.registration.naver.scope=name,email,profile_image
spring.security.oauth2.client.registration.naver.client-name=Naver
#provider
spring.security.oauth2.client.provider.naver.authorization_uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token_uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user_name_attribute=response
#user_name_attribute=response : 기준이 되는 user_name의 이름을 네이버에서는 response로 해야함. 이유는 네이버의 회원 조회 시 반환되는 JSON형태 때문